--Scenario 1
CREATE TABLE AuditLog (
    LogID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    TransactionID NUMBER,
    AccountID NUMBER,
    TransactionDate DATE,
    Amount NUMBER,
    TransactionType VARCHAR2(10),
    LogDate DATE DEFAULT SYSDATE
);
CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
    :NEW.LastModified := SYSDATE;
END;
/
SELECT CustomerID, Name, LastModified FROM Customers WHERE CustomerID = 1;
UPDATE Customers
SET Balance = Balance + 100
WHERE CustomerID = 1;

COMMIT;
SELECT CustomerID, Name, LastModified FROM Customers WHERE CustomerID = 1;

--Scenario 2
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AuditLog';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Transactions';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/
CREATE TABLE Transactions (
    TransactionID NUMBER PRIMARY KEY,
    AccountID NUMBER,
    TransactionDate DATE,
    Amount NUMBER,
    TransactionType VARCHAR2(10)
);
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AuditLog';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE Transactions';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/
CREATE TABLE Transactions (
    TransactionID NUMBER PRIMARY KEY,
    AccountID NUMBER,
    TransactionDate DATE,
    Amount NUMBER,
    TransactionType VARCHAR2(10)
);
CREATE TABLE AuditLog (
    LogID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TransactionID NUMBER,
    LogDate DATE,
    "ACTION" VARCHAR2(50)
);
BEGIN
    EXECUTE IMMEDIATE 'DROP TABLE AuditLog';
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('AuditLog table could not be dropped or does not exist.');
END;
/
CREATE TABLE AuditLog (
    LogID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TransactionID NUMBER,
    LogDate DATE DEFAULT SYSDATE,
    Amount NUMBER,
    TransactionType VARCHAR2(20)
);
CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    INSERT INTO AuditLog (TransactionID, Amount, TransactionType)
    VALUES (:NEW.TransactionID, :NEW.Amount, :NEW.TransactionType);
END;
/
INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount, TransactionType)
VALUES (5001, 2004, SYSDATE, 1500, 'Deposit');
COMMIT;
SELECT * FROM AuditLog;

--scenario 3
CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
    v_balance NUMBER;
BEGIN
    -- Get current balance of the account
    SELECT Balance INTO v_balance
    FROM Accounts
    WHERE AccountID = :NEW.AccountID;

    -- Rule 1: Withdrawal should not exceed balance
    IF :NEW.TransactionType = 'Withdrawal' AND :NEW.Amount > v_balance THEN
        RAISE_APPLICATION_ERROR(-20001, 'Withdrawal amount exceeds available balance.');
    END IF;

    -- Rule 2: Deposit should be positive
    IF :NEW.TransactionType = 'Deposit' AND :NEW.Amount <= 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'Deposit amount must be positive.');
    END IF;
END;
/
INSERT INTO Transactions VALUES (5010, 2004, SYSDATE, 1000, 'Deposit');
SELECT * FROM Transactions WHERE TransactionID = 5010;
SELECT * FROM AuditLog WHERE TransactionID = 5010;
INSERT INTO Transactions VALUES (5011, 2004, SYSDATE, -500, 'Deposit');
-- Assuming AccountID 2004 has â‚¹5000
INSERT INTO Transactions VALUES (5012, 2004, SYSDATE, 10000, 'Withdrawal');








